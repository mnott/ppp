#!/usr/bin/env python3
# encoding: utf-8
r"""

Take an text file and apply regexes read from a pattern file.

# RegEx Pattern File

Those regexes are done in a pattern file as follows:

 - Lines starting with `#` are regarded as comments
 - Empty lines are ignored too
 - Search and replace pattern are separated by !
 - Group backreferences work with backslash

A minimal file may look like this:

```
# Comment
a(.*?)b!c\1d
```
"""
#
# Imports
#
import typer
import regex as re


#
# Command Line Interface
#
app = typer.Typer(add_completion=False)


#
# Parse
#
@app.command()
def parse (
    pattern: str  = typer.Option("pattern.txt", help="Pattern File"),
    parse:   str  = typer.Option("content.txt", help="File to parse")
):
    """
    Parse the file and apply the regex patterns specified in the `pattern` file to the `parse` file.

    :param pattern: str, path to the pattern file.
    :param parse: str, path to the file to parse.
    """
    loaded_pattern = []

    with open(pattern, "r") as f:
        for line in f:
            line = line.rstrip()
            if (line.startswith("#") or "!" not in line):
                continue
            search, replace = line.split("!", 1)
            loaded_pattern.append((search, replace))

    with open(parse, "r") as f:
        for line in f:
            line = line.rstrip()
            for search, replace in loaded_pattern:
                line = re.sub(search, replace, line)
            print(line)



#
# Command: Doc
#
@app.command()
def doc(title: str = "Python Pattern Parser (PPP)", toc: bool = True):
    """
    Re-create the documentation and write it to the output file.

    :param title: str, title of the documentation.
    :param toc: bool, whether to include a table of contents.
    """
    import importlib
    import importlib.util
    import sys
    import os
    import doc2md

    def import_path(path):
        module_name = os.path.basename(path).replace("-", "_")
        spec = importlib.util.spec_from_loader(
            module_name,
            importlib.machinery.SourceFileLoader(module_name, path),
        )
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
        sys.modules[module_name] = module
        return module

    mod_name = os.path.basename(__file__)
    if mod_name.endswith(".py"):
        mod_name = mod_name.rsplit(".py", 1)[0]
    atitle = title or mod_name.replace("_", "-")
    module = import_path(__file__)
    docstr = module.__doc__
    result = doc2md.doc2md(docstr, atitle, toc=toc, min_level=0)
    print(result)


#
# Call app Function
#
if __name__ == "__main__":
    try:
        app()
    except SystemExit as e:
        if e.code != 0:
            raise

